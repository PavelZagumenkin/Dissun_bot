from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import SessionLocal, PersonalTemplate
from keyboards.keyboards import return_admin_main_menu

router = Router()

class TemplateEditState(StatesGroup):
    choosing_template = State()
    editing_text = State()
    editing_days_before = State()

async def send_template(bot: Bot, template: PersonalTemplate, chat_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ª–∏–±–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å PersonalTemplate –∏–º–µ–µ—Ç –ø–æ–ª—è:
        - message_text: str
        - send_image: bool
        - image_path: Optional[str]
    """
    if template.send_image and template.image_path:
        photo = InputFile(template.image_path)
        caption = template.message_text or None
        await bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
    else:
        await bot.send_message(chat_id=chat_id, text=template.message_text)

@router.callback_query(F.data == 'personal_templates')
async def list_templates(callback: CallbackQuery):
    db = SessionLocal()
    templates = db.query(PersonalTemplate).all()
    kb = InlineKeyboardMarkup(row_width=1)
    for t in templates:
        kb.insert(
            InlineKeyboardButton(
                text=f"{t.name} ({t.days_before} –¥–Ω–µ–π)",
                callback_data=f"tpl_{t.id}"
            )
        )
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='return_admin_main_menu'))
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=kb)
    await callback.answer()
    db.close()

@router.callback_query(F.data.startswith('tpl_'))
async def choose_template(callback: CallbackQuery, state: FSMContext):
    tpl_id = int(callback.data.split('_')[1])
    db = SessionLocal()
    tpl = db.query(PersonalTemplate).get(tpl_id)
    db.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(tpl_id=tpl_id)

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit_text'))
    kb.add(InlineKeyboardButton(text='üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data='edit_image'))
    kb.add(InlineKeyboardButton(text='‚è± –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥', callback_data='edit_days'))
    kb.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='personal_templates'))

    await callback.message.edit_text(
        f"–®–∞–±–ª–æ–Ω: {tpl.name}\n"
        f"–¢–µ–∫—Å—Ç: {tpl.message_text or '‚Äî'}\n"
        f"–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π: {tpl.days_before}\n"
        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–µ—Å—Ç—å' if tpl.send_image and tpl.image_path else '–Ω–µ—Ç'}",
        reply_markup=kb
    )
    await state.set_state(TemplateEditState.choosing_template)
    await callback.answer()

@router.callback_query(F.data == 'edit_text')
async def ask_new_text(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await state.set_state(TemplateEditState.editing_text)
    await callback.answer()

@router.message(TemplateEditState.editing_text)
async def save_new_text(message: Message, state: FSMContext):
    data = await state.get_data()
    tpl_id = data['tpl_id']
    db = SessionLocal()
    tpl = db.query(PersonalTemplate).get(tpl_id)
    tpl.message_text = message.text
    db.commit()
    db.close()
    await message.answer('–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=return_admin_main_menu)
    await state.clear()

@router.callback_query(F.data == 'edit_image')
async def ask_new_image(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "—É–¥–∞–ª–∏—Ç—å", —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
    )
    await state.set_state(TemplateEditState.editing_text)  # reuse state for simplicity
    await state.update_data(editing_image=True)
    await callback.answer()

@router.message(TemplateEditState.editing_text)
async def save_new_image(message: Message, state: FSMContext):
    data = await state.get_data()
    tpl_id = data['tpl_id']
    db = SessionLocal()
    tpl = db.query(PersonalTemplate).get(tpl_id)

    if data.get('editing_image'):
        if message.text and message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
            tpl.send_image = False
            tpl.image_path = None
        elif message.photo:
            photo = message.photo[-1]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º tpl.image_path
            path = f"images/template_{tpl_id}.jpg"
            await photo.download(destination_file=path)
            tpl.send_image = True
            tpl.image_path = path
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ "—É–¥–∞–ª–∏—Ç—å".')
            db.close()
            return

        db.commit()
        db.close()
        await message.answer('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.', reply_markup=return_admin_main_menu)
        await state.clear()
    else:
        db.close()

@router.callback_query(F.data == 'edit_days')
async def ask_new_days(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è:')
    await state.set_state(TemplateEditState.editing_days_before)
    await callback.answer()

@router.message(TemplateEditState.editing_days_before)
async def save_new_days(message: Message, state: FSMContext):
    try:
        days = int(message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    data = await state.get_data()
    tpl_id = data['tpl_id']
    db = SessionLocal()
    tpl = db.query(PersonalTemplate).get(tpl_id)
    tpl.days_before = days
    db.commit()
    db.close()
    await message.answer('–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=return_admin_main_menu)
    await state.clear()

